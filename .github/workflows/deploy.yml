name: Build and Deploy Evaluation Function to Lambda Feedback

on:
  workflow_call:
    inputs:
      template-repository-name:
        type: string
        description: "The name of the repository where the template is located"
        required: true
      environment:
        type: string
        description: "Deploy to staging or production"
        required: true
        default: staging
      region:
        type: string
        description: "The AWS region to deploy to"
        required: false
      build-file:
        type: string
        description: "The path to the Dockerfile to build"
        required: false
        default: "Dockerfile"
      build-context:
        type: string
        description: "The context to use for the Docker build"
        required: false
        default: "."
      build-target:
        type: string
        description: "The target stage of the image to build"
        required: false
      build-args:
        type: string
        description: "The build arguments to pass to the Docker build"
        required: false
      build-platforms:
        type: string
        description: "The platforms to build the image for"
        default: "aws"
        required: false
      version-bump:
        type: string
        description: "Used for prod: The version number to bump (major, minor or patch)"
        required: false
        default: "patch"
      branch:
        type: string
        description: "Used for prod: The branch to deploy"
        required: false
        default: "main"
    secrets:
      aws-key-id:
        description: "The AWS access key ID"
        required: true
      aws-secret-key:
        description: "The AWS secret access key"
        required: true
      function-admin-api-key:
        description: "The API key for the Lambda Feedback function admin API"
        required: true
      build-secrets:
        description: "The Docker secrets to use for the build"
        required: false
      gcp_credentials:
        description: "The JSON key for deploying to GCP"
        required: false

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      evaluation_function_name: ${{ steps.normalize-function-name.outputs.name }}
      region: ${{ steps.set-region.outputs.region }}
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up boilerplate config.json
        if: github.repository == inputs.template-repository-name
        run: |
          functionName=$(echo "${{ github.event.repository.name }}" | sed -E 's/([A-Z])([A-Z]*)/\L\1\2/g' | sed -E 's/-([a-z])/\U\1/g' | tr -d '-')
          echo "{\"EvaluationFunctionName\": \"$functionName\"}" > config.json

      - name: Check for config.json
        run: |
          if [[ ! -f "config.json" ]]; then echo "Error: config.json not found."; exit 1; fi

      - name: Read config.json
        id: config
        run: |
          echo 'config<<EOF' >> $GITHUB_OUTPUT
          cat ./config.json >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT

      - name: Get Evaluation Function Name
        id: evaluation_function_name
        run: |
          functionName="${{fromJson(steps.config.outputs.config).EvaluationFunctionName}}"
          if [[ -z "$functionName" ]]; then echo "Set EvaluationFunctionName in config.json"; exit 1; fi
          echo "name=$functionName" >> "$GITHUB_OUTPUT"
      - name: Setup normalize function name
        if: inputs.build-platforms == 'gcp'
        id: setup-normalize-function-name
        uses: Entepotenz/change-string-case-action-min-dependencies@v1
        with:
          string: ${{ steps.evaluation_function_name.outputs.name }}
      - name: Normalize function name
        if: inputs.build-platforms == 'gcp'
        id: normalize-function-name
        run: echo name=${{steps.setup-normalize-function-name.outputs.lowercase}} >> $GITHUB_OUTPUT
      - name: AWS function name
        if: inputs.build-platforms == 'aws'
        run: echo name=${{steps.evaluation_function_name.outputs}} >> $GITHUB_OUTPUT
      - name: Set default region based on platform
        id: set-region
        run: |
          if [[ -n "${{ inputs.region }}" ]]; then
            # Use provided region
            region="${{ inputs.region }}"
          elif [[ "${{ inputs.build-platforms }}" == "aws" ]]; then
            # Default AWS region
            region="eu-west-2"
          else
            # Default GCP region (or other platforms)
            region="europe-west2"
          fi
          echo "region=$region" >> "$GITHUB_OUTPUT"
      - name: Validate AWS secrets for AWS platform
        if: inputs.build-platforms == 'aws'
        run: |
          if [[ -z "${{ secrets.aws-key-id }}" ]]; then
            echo "Error: aws-key-id secret is required when build-platforms is 'aws'"
            exit 1
          fi
          if [[ -z "${{ secrets.aws-secret-key }}" ]]; then
            echo "Error: aws-secret-key secret is required when build-platforms is 'aws'"
            exit 1
          fi
          if [[ -z "${{ secrets.function-admin-api-key }}" ]]; then
            echo "Error: function-admin-api-key secret is required when build-platforms is 'aws'"
            exit 1
          fi


  deploy-staging:
    if: ${{inputs.environment == 'staging'}}
    uses: ./.github/workflows/staging_deploy.yml
    needs: setup
    with:
      evaluation_function_name: ${{ needs.setup.outputs.evaluation_function_name }}
      template-repository-name: ${{ inputs.template-repository-name }}
      region: ${{ needs.setup.outputs.region }}
      build-file: ${{ inputs.build-file }}
      build-context: ${{ inputs.build-context }}
      build-target: ${{ inputs.build-target }}
      build-args: ${{inputs.build-args}}
      build-platforms: ${{inputs.build-platforms}}
    secrets:
      aws-key-id: ${{ secrets.aws-key-id }}
      aws-secret-key: ${{ secrets.aws-secret-key }}
      function-admin-api-key: ${{ secrets.function-admin-api-key }}
      build-secrets: ${{ secrets.build-secrets }}
      gcp_credentials: ${{ secrets.gcp_credentials }}

  deploy-production:
    if: ${{inputs.environment == 'production'}}
    uses: ./.github/workflows/production_deploy.yml
    needs: setup
    with:
      evaluation_function_name: ${{ needs.setup.outputs.evaluation_function_name }}
      template-repository-name: ${{ inputs.template-repository-name }}
      region: ${{ needs.setup.outputs.region }}
      build-file: ${{ inputs.build-file }}
      build-context: ${{ inputs.build-context }}
      build-target: ${{ inputs.build-target }}
      build-args: ${{inputs.build-args}}
      build-platforms: ${{inputs.build-platforms}}
      version-bump: ${{inputs.version-bump}}
      branch: ${{inputs.branch}}
    secrets:
      aws-key-id: ${{ secrets.aws-key-id }}
      aws-secret-key: ${{ secrets.aws-secret-key }}
      function-admin-api-key: ${{ secrets.function-admin-api-key }}
      build-secrets: ${{ secrets.build-secrets }}
      gcp_credentials: ${{ secrets.gcp_credentials }}